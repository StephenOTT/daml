-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Test where

import Daml.Script

import qualified RulesA as A
import qualified RulesB as B

script1 : Script ()
script1 = do

  admin <- allocateParty "Administrator"
  alice <- allocateParty "Alice"
  bank <- allocateParty "Bank"
  charlie <- allocateParty "Charlie"
  dave <- allocateParty "Dave"

  let everyone = [alice,bank,charlie,dave]

  -- Admin administrated rules.
  rules <- submit admin do createCmd A.RulesT with admin, obs = everyone

  -- Bank issued coin.
  coin1 <- submit bank do exerciseCmd rules A.RulesT_Mint with issuer = bank

  -- Transfer coin to Alice.
  let deadCoin1 = coin1
  coin1 <- submitMulti [bank,alice] [] $ do
    exerciseCmd rules A.RulesT_Transfer with
      coin = coin1
      owner = bank
      newOwner = alice

  -- The original coin is dead; it cannot be transfered again.
  submitMultiMustFail [bank,alice] [] $ do
    exerciseCmd rules A.RulesT_Transfer with
      coin = deadCoin1
      owner = bank
      newOwner = alice

  -- Transfer coin from Alice to Charlie.
  -- Note: We do not require submit-authority from the issuing Bank.
  coin1 <- submitMulti [alice,charlie] [] $ do
    exerciseCmd rules A.RulesT_Transfer with
      coin = coin1
      owner = alice
      newOwner = charlie

  -- Take down the rules.
  submit admin do exerciseCmd rules Archive

  -- Transfers fail when the rules are not operation.
  submitMultiMustFail [charlie,dave] [] $ do
    exerciseCmd rules A.RulesT_Transfer with
      coin = coin1
      owner = charlie
      newOwner = dave

  -- Create some new rules.
  rules <- submit admin do createCmd A.RulesT with admin, obs = [bank,alice,charlie]

  -- Transfers work again using the new rules.
  coin1 <- submitMulti [charlie,dave] [] $ do
    exerciseCmd rules A.RulesT_Transfer with
      coin = coin1
      owner = charlie
      newOwner = dave


  -- UPGRADE #1 -- Track #transfers

  -- Upgrade rules
  submit admin do exerciseCmd rules Archive
  rules <- submit admin do createCmd B.RulesT with admin, obs = everyone

  -- Now coins track their #transfers
  coin1 <- submitMulti [dave,alice] [] $ do
    exerciseCmd rules B.RulesT_Transfer with
      coin = coin1
      owner = dave
      newOwner = alice

  coin1 <- submitMulti [alice,charlie] [] $ do
    exerciseCmd rules B.RulesT_Transfer with
      coin = coin1
      owner = alice
      newOwner = charlie

  n <- submit bank $ do
    exerciseCmd rules B.RulesT_QueryTransferCount with
      coin = coin1
      inspector = bank

  assert (n == 2)

  -- Mint a 2nd coin to see 0 #transfers
  coin2 <- submit bank do exerciseCmd rules B.RulesT_Mint with issuer = bank

  n <- submit bank $ do
    exerciseCmd rules B.RulesT_QueryTransferCount with
      coin = coin2
      inspector = bank

  assert (n == 0)

  pure ()
