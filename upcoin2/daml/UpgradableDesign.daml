-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module UpgradableDesign where

data CoinView = CoinView with
  issuer : Party
  owner : Party
    deriving (Eq,Show)

interface CoinI where
  _view : CoinView

  nonconsuming choice CoinI_Transfer : ContractId CoinI
    with
      rules : ContractId RulesT
      newOwner : Party
    controller [(_view this).owner, newOwner]
    do
      exercise rules RulesT_Transfer_Impl with
        coin = self
        view = _view this
        authority = signatory this ++ [newOwner]
        newOwner

  choice CoinI_Archive : ()
    controller (signatory this)
    do pure ()


template RulesT -- TODO: eventually go via a rules interface
  with
    admin : Party
    obs : [Party]
  where
    signatory [admin]
    observer obs

    -- The rules choose what kind of coin to mint.
    nonconsuming choice RulesT_Mint : (ContractId CoinI)
      with issuer : Party
      controller [issuer]
      do
        new <- create UnitCoinT with issuer, owner = issuer
        pure $ toInterfaceContractId new

    -- The Transfer entry point. This delegates via the coin to collect (issuer) authority.
    nonconsuming choice RulesT_Transfer : (ContractId CoinI)
      with
        coin : ContractId CoinI
        owner : Party
        newOwner : Party
      controller [owner,newOwner]
      do exercise coin CoinI_Transfer with rules = self, newOwner

    -- The core Transfer logic. (The coin delegates back to here.)
    -- Authority is passed explicitly.
    nonconsuming choice RulesT_Transfer_Impl : (ContractId CoinI)
      with
        coin : ContractId CoinI
        view : CoinView
        authority : [Party]
        newOwner : Party
      controller authority
      do
        new <- create UnitCoinT with issuer = view.issuer, owner = newOwner
        exercise coin CoinI_Archive
        pure $ toInterfaceContractId new


template UnitCoinT
  with
    issuer : Party
    owner : Party
  where
    signatory [issuer,owner]

    implements CoinI where
      _view : CoinView =  CoinView with issuer, owner
